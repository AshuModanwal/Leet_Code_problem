// top down approuch (memoization & recursion)..
int fibo(int n, vector<int> &dp){
        if(n<=1)
            return n;
        if(dp[n]!=-1)
                return dp[n];
        dp[n] = fibo(n-1, dp) + fibo(n-2, dp);
        return dp[n];
    }
    int fib(int n) {
        vector<int> dp(n+1);
        fill(dp.begin(), dp.end(), -1);
        // for(int i=0; i<=n; i++)
        //     dp[i]=-1;
        int ans = fibo(n, dp);
        return ans;  
    }
// Bottum up Approuch....
int fib(int n) {
        if(n==0 || n==1)
            return n;
        vector<int> dp(n+1);
           dp[0] = 0;
           dp[1] = 1;
           for(int i=2; i<=n; i++)
                dp[i] = dp[i-1] + dp[i-2];
            return dp[n];
      }
   // space optimization approuch of DP
   int fib(int n) {
   int prev2 = 0;
        int prev1 = 1;
        
        for(int i=2; i<=n; i++){
            int curr = prev1 + prev2;
            prev2 = prev1;
            prev1 = curr;
        }
        return prev1;
    }
